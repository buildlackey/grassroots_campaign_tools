

===== FILE: billing_linked_new_project.sh =====

#!/usr/bin/env bash
set -euo pipefail

# === Function to check if the user is logged in ===
check_login() {
  if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q .; then
    echo "‚ùå No active account found. Please log in."
    gcloud auth login
  fi
}

# === Check if user is logged in ===
check_login

# Parse command-line arguments
while getopts "p:b:" opt; do
  case "$opt" in
    p) PROJECT_ID="$OPTARG" ;;
    b) BILLING_ID="$OPTARG" ;;
    *) echo "Usage: $0 -p <project-id> -b <billing-id>"; exit 1 ;;
  esac
done

# Check if both arguments are provided
if [ -z "${PROJECT_ID:-}" ] || [ -z "${BILLING_ID:-}" ]; then
  echo "‚ùå Both PROJECT_ID and BILLING_ID are required."
  echo "Usage: $0 -p <project-id> -b <billing-id>"
  exit 1
fi

# === Create the new project ===
echo "Creating Google Cloud project: $PROJECT_ID..."
if ! gcloud projects create "$PROJECT_ID"; then
  echo "‚ùå Failed to create project: $PROJECT_ID"
  exit 1
fi

# === Set the active project ===
echo "Setting active project to: $PROJECT_ID..."
gcloud config set project "$PROJECT_ID"

# === Link the billing account to the new project ===
echo "Linking billing account: $BILLING_ID to project $PROJECT_ID..."
if ! gcloud billing projects link "$PROJECT_ID" --billing-account="$BILLING_ID"; then
  echo "‚ùå Failed to link billing account $BILLING_ID"
  exit 1
fi

# === Grant OWNER permissions to the active user ===
ACCOUNT=$(gcloud config get-value account)
echo "üîì Granting OWNER role to $ACCOUNT..."
gcloud projects add-iam-policy-binding "$PROJECT_ID" \
  --member="user:$ACCOUNT" \
  --role="roles/owner"

# === Enable APIs .. very permissive for prototyping ===
echo "üîå Enabling essential APIs..."
APIS=(
  sheets.googleapis.com
  drive.googleapis.com
  script.googleapis.com
  places-backend.googleapis.com
  maps-backend.googleapis.com
  geocoding-backend.googleapis.com
  cloudresourcemanager.googleapis.com
  serviceusage.googleapis.com
  iam.googleapis.com
  appsmarket-component.googleapis.com
  calendar-json.googleapis.com
  people.googleapis.com
  gmail.googleapis.com
  admin.googleapis.com
  forms.googleapis.com
)


for API in "${APIS[@]}"; do
  echo "üîå Enabling $API..."
  gcloud services enable "$API" --project="$PROJECT_ID" --quiet
done

# === Save config to file ===
CONFIG_FILE="maps_config.env"
echo "PROJECT_ID=\"$PROJECT_ID\"" > "$CONFIG_FILE"
echo "üíæ Saved project ID to $CONFIG_FILE"

echo "‚úÖ Project $PROJECT_ID created, fully unlocked, and ready for downstream setup."



===== FILE: create_sheet.sh =====

#!/usr/bin/env bash
set -euo pipefail



PROJECT_NAME="create-sheet-shim"
SCRIPT_TITLE="Create Sheet Shim"
TMP_DIR="/tmp/${PROJECT_NAME}_$$"
FUNC_NAME="createSheetAndLogId"


#   Verify prerequisites, then copy needed clasp files
#
bash  verify_project_ownership_and_apps_script_api_enabled.sh   
cp ~/.clasprc.json "$TMP_DIR/"


mkdir -p "$TMP_DIR"
cd "$TMP_DIR"
echo "setting up shim to create sheet in  $TMP_DIR"

# 1. Create new standalone script project
clasp create --title "$SCRIPT_TITLE" --type standalone > /dev/null

# 2. Inject the createSheet function
cat > Code.js <<EOF
function ${FUNC_NAME}() {
  const sheet = SpreadsheetApp.create("Campaign Autocomplete Sheet");
  Logger.log("‚úÖ Created sheet: " + sheet.getUrl());
}
EOF

# 3. Push code to Apps Script project
clasp push > /dev/null



exit 

# 1. Create new standalone script project
clasp create --title "$SCRIPT_TITLE" --type standalone > /dev/null

# 2. Inject the createSheet function
cat > Code.js <<EOF
function ${FUNC_NAME}() {
  const sheet = SpreadsheetApp.create("Campaign Autocomplete Sheet");
  Logger.log("‚úÖ Created sheet: " + sheet.getUrl());
}
EOF





exit 

echo https://console.cloud.google.com/apis/library/sheets.googleapis.com?project=$PROJECT_ID

echo verify you see 'Manage'  {If not ‚ÄúEnable‚Äù. If not enabled, click "Enable"}.

echo https://console.cloud.google.com/apis/library/drive.googleapis.com?project=$PROJECT_ID

echo https://console.cloud.google.com/apis/library/script.googleapis.com?project=$PROJECT_ID



echo "üîê Authenticating with extra scopes for Apps Script API..."














need special authentication...

gcloud auth application-default login \
  --scopes="https://www.googleapis.com/auth/script.projects,https://www.googleapis.com/auth/cloud-platform"

ACCESS_TOKEN=$(gcloud auth application-default print-access-token)



EXTRA API's   -- maybe important step to workaround elusive oauth screen.

gcloud services enable \
  script.googleapis.com \
  oauth2.googleapis.com \
  cloudresourcemanager.googleapis.com \
  iamcredentials.googleapis.com \
  drive.googleapis.com \
  --project=distancetools300











===== FILE: full_log_out.sh =====

#  run as . full_log_out.sh
export GOOGLE_APPLICATION_CREDENTIALS=
gcloud auth revoke --all
rm service-account-key.json 
gcloud config unset account
gcloud config unset project
rm -rf ~/.config/gcloud

rm -rf ~/.mozilla/firefox
rm -rf ~/.cache/mozilla/firefox

rm -f ~/.config/gcloud/application_default_credentials.json



===== FILE: maps_config.env =====

PROJECT_ID="distancetools600"
MAPS_API_KEY="AIzaSyD80mpRvYtoSLESYRqoKFgs3wtSKOV2tmk"
SHEET_URL=https://docs.google.com/spreadsheets/d/1bALP_iP-qP7DA9y14cXe14n-EUAOxnLCPxlgEVsSEFA
SHEET_ID=1bALP_iP-qP7DA9y14cXe14n-EUAOxnLCPxlgEVsSEFA



===== FILE: sheet_creation_notes.txt =====

üõ†Ô∏è Automated Workflow: Creating a Google Sheet + Binding a Script
This flow automates the creation of a Google Sheet and links it to a pushable Apps Script project using clasp. It uses a temporary "shim" Apps Script project to programmatically create the Sheet.

üîÅ Why Use a "Shim" Script?
We need a way to create a new Sheet entirely from the command line. Google Sheets themselves don‚Äôt expose a convenient way to auto-attach a bound script unless a Sheet already exists. So:

We create a standalone Apps Script project (the shim).

That shim executes SpreadsheetApp.create(...) to create the Sheet.

The newly created Sheet will automatically be bound to its own Apps Script project ‚Äî separate from the shim.

We then discard the shim, and begin working with the script that is bound to the new Sheet.

‚ùå Why the Shim Is Not Bound to a GCP Project
The shim script only calls SpreadsheetApp.create(), which:

Works fine using the default internal GCP project Google provides.

Doesn‚Äôt require API key, billing, quotas, logging, or special scopes.

Keeps the workflow lightweight and portable.

So there‚Äôs no n


===== FILE: verify_project_ownership_and_apps_script_api_enabled.sh =====

############################################################################
#  USAGE:  bash verify_project_ownership_and_apps_script_api_enabled.sh
#
# Purpose:
#   Ensures that the currently active `gcloud` account has
#   sufficient permissions (Owner or Editor) on the GCP
#   project defined in `maps_config.env`.
#
# Why this matters:
#   Many gcloud operations (e.g. linking Apps Script projects,
#   enabling APIs, or using `clasp`) fail or behave
#   unpredictably when the account lacks Editor/Owner roles.
#
# Expected:
#   - A config file named `maps_config.env` in the working dir
#   - It must define `PROJECT_ID=...`
#
# Behavior:
#   - Reads the current gcloud active account
#   - Checks if the account is an Owner or Editor of PROJECT_ID
#   - Exits with an error if not
############################################################################


function assert_project_owner_or_editor() {
  local CONFIG_FILE="./maps_config.env"

  # Ensure config file exists
  if [[ ! -f "$CONFIG_FILE" ]]; then
    echo "‚ùå ERROR: Config file $CONFIG_FILE not found"
    exit 1
  fi

  # Load PROJECT_ID from config file
  source "$CONFIG_FILE"

  if [[ -z "$PROJECT_ID" ]]; then
    echo "‚ùå ERROR: PROJECT_ID not set in $CONFIG_FILE"
    exit 1
  fi

  local ACTIVE_ACCOUNT
  ACTIVE_ACCOUNT=$(gcloud config get-value account 2>/dev/null)

  local HAS_ACCESS
  HAS_ACCESS=$(gcloud projects get-iam-policy "$PROJECT_ID" \
    --flatten="bindings[].members" \
    --format='value(bindings.role)' \
    --filter="bindings.members:user:$ACTIVE_ACCOUNT" | grep -E 'roles/(owner|editor)')

  if [[ -z "$HAS_ACCESS" ]]; then
    echo "‚ùå ERROR: Account $ACTIVE_ACCOUNT is not owner/editor of $PROJECT_ID"
    exit 1
  else
    echo "‚úÖ Access verified: $ACTIVE_ACCOUNT has rights on $PROJECT_ID"
  fi
}




function assert_google_apps_scripts_api_enabled_for_user() {
    echo "üîç Verify that Apps Script API is enabled at user level (should say 'On'):"
    echo "   üëâ Open: https://script.google.com/home/usersettings"
    echo ""
    read -p "Have you enabled the Google Apps Script API? [y/N] " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo "‚ùå Setup aborted. Please enable the API toggle and re-run."
      exit 1
    fi
    echo "‚úÖ Proceeding with setup..."
}


assert_project_owner_or_editor

assert_google_apps_scripts_api_enabled_for_user
