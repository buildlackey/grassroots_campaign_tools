

===== FILE: billing_linked_new_project.sh =====

#!/usr/bin/env bash
set -euo pipefail

# === Function to check if the user is logged in ===
check_login() {
  if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q .; then
    echo "‚ùå No active account found. Please log in."
    gcloud auth login
  fi
}

# === Check if user is logged in ===
check_login

# Parse command-line arguments
while getopts "p:b:" opt; do
  case "$opt" in
    p) PROJECT_ID="$OPTARG" ;;
    b) BILLING_ID="$OPTARG" ;;
    *) echo "Usage: $0 -p <project-id> -b <billing-id>"; exit 1 ;;
  esac
done

# Check if both arguments are provided
if [ -z "${PROJECT_ID:-}" ] || [ -z "${BILLING_ID:-}" ]; then
  echo "‚ùå Both PROJECT_ID and BILLING_ID are required."
  echo "Usage: $0 -p <project-id> -b <billing-id>"
  exit 1
fi

# === Create the new project ===
echo "Creating Google Cloud project: $PROJECT_ID..."
if ! gcloud projects create "$PROJECT_ID"; then
  echo "‚ùå Failed to create project: $PROJECT_ID"
  exit 1
fi

# === Set the active project ===
echo "Setting active project to: $PROJECT_ID..."
gcloud config set project "$PROJECT_ID"

# === Link the billing account to the new project ===
echo "Linking billing account: $BILLING_ID to project $PROJECT_ID..."
if ! gcloud billing projects link "$PROJECT_ID" --billing-account="$BILLING_ID"; then
  echo "‚ùå Failed to link billing account $BILLING_ID"
  exit 1
fi

# === Grant OWNER permissions to the active user ===
ACCOUNT=$(gcloud config get-value account)
echo "üîì Granting OWNER role to $ACCOUNT..."
gcloud projects add-iam-policy-binding "$PROJECT_ID" \
  --member="user:$ACCOUNT" \
  --role="roles/owner"

# === Enable APIs .. very permissive for prototyping ===
echo "üîå Enabling essential APIs..."
APIS=(
  sheets.googleapis.com
  drive.googleapis.com
  script.googleapis.com
  places-backend.googleapis.com
  maps-backend.googleapis.com
  geocoding-backend.googleapis.com
  cloudresourcemanager.googleapis.com
  serviceusage.googleapis.com
  iam.googleapis.com
  appsmarket-component.googleapis.com
  calendar-json.googleapis.com
  people.googleapis.com
  gmail.googleapis.com
  admin.googleapis.com
  forms.googleapis.com
)


for API in "${APIS[@]}"; do
  echo "üîå Enabling $API..."
  gcloud services enable "$API" --project="$PROJECT_ID" --quiet
done

# === Save config to file ===
CONFIG_FILE="maps_config.env"
echo "PROJECT_ID=\"$PROJECT_ID\"" > "$CONFIG_FILE"
echo "üíæ Saved project ID to $CONFIG_FILE"

echo "‚úÖ Project $PROJECT_ID created, fully unlocked, and ready for downstream setup."



===== FILE: create_sheet.sh =====

#!/usr/bin/env bash
set -euo pipefail

CONFIG_FILE="$(git rev-parse --show-toplevel)/maps_config.env"
DEBUG=false
SHEET_NAME=""

print_help() {
  cat <<EOF
Usage: $0 -n SHEET_NAME [-D]

Options:
  -n SHEET_NAME   Required. Must be a unique, never-before-used name.
  -D              Enable debug output (traces API responses and intermediate values).
  -h              Show this help message.

Example:
  $0 -n test-sheet-$(date +%s) -D
EOF
}

while getopts ":n:Dh" opt; do
  case ${opt} in
    n)
      SHEET_NAME="$OPTARG"
      ;;
    D)
      DEBUG=true
      ;;
    h)
      print_help
      exit 0
      ;;
    \?)
      echo "‚ùå Invalid option: -$OPTARG" >&2
      print_help
      exit 1
      ;;
    :)
      echo "‚ùå Option -$OPTARG requires an argument." >&2
      print_help
      exit 1
      ;;
  esac
done

if [[ -z "$SHEET_NAME" ]]; then
  echo "‚ùå You must specify a sheet name with -n" >&2
  print_help
  exit 1
fi

echo "üìù Go to: https://sheets.new and create a new sheet."
echo "üìõ Name it exactly: '$SHEET_NAME'"
echo "üö® Next step: Open Extensions menu item, then ‚Üí Apps Script."
echo "üìå Then rename the project associated with the script (e.g. 'Some New Random Name'), then save ."
echo "üïì Wait 5‚Äì10 seconds, so changes can propagate enough to run the next automation script."
read -p "‚úÖ Press Enter when you're done: "

# üîê Ensure clasp is logged in
if ! jq -e '.tokens.default.access_token' ~/.clasprc.json >/dev/null 2>&1; then
  echo "üîê Running clasp login..."
  clasp login
fi

# üîë Extract access token
ACCESS_TOKEN=$(jq -r '.tokens.default.access_token' ~/.clasprc.json)

# üîç Query Drive API for Sheet details
[[ "$DEBUG" == "true" ]] && echo "üîé Searching for spreadsheet named '$SHEET_NAME'..."
SHEET_DETAILS=$(curl -s \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  "https://www.googleapis.com/drive/v3/files?q=name%3D'${SHEET_NAME}'%20and%20mimeType%3D'application%2Fvnd.google-apps.spreadsheet'")

[[ "$DEBUG" == "true" ]] && echo "$SHEET_DETAILS" | jq

# üì• Extract Sheet ID
SHEET_ID=$(echo "$SHEET_DETAILS" | jq -r '.files[0].id')

# üßØ Handle not found
if [[ -z "$SHEET_ID" || "$SHEET_ID" == "null" ]]; then
  echo "‚ùå Could not find a spreadsheet named '$SHEET_NAME'."
  exit 1
fi

echo "‚úÖ Found Sheet ID: $SHEET_ID"

# üßæ Append to maps_config.env
echo "SHEET_NAME=\"$SHEET_NAME\"" >> "$CONFIG_FILE"
echo "SHEET_ID=\"$SHEET_ID\"" >> "$CONFIG_FILE"
echo "üß∑ Added SHEET_NAME and SHEET_ID to $CONFIG_FILE"



===== FILE: full_log_out.sh =====

#  run as . full_log_out.sh
export GOOGLE_APPLICATION_CREDENTIALS=
gcloud auth revoke --all
rm -f service-account-key.json 
gcloud config unset account
gcloud config unset project
rm -rf ~/.config/gcloud
rm -f ~/.config/gcloud/application_default_credentials.json

rm -rf ~/.mozilla/firefox
rm -rf ~/.cache/mozilla/firefox

clasp logout
rm -f ~/.clasprc.json       # <- This is clasp‚Äôs global auth token
rm -rf ~/.clasp-*           # <- In case of clasp env profiles (not always present)




===== FILE: shell.nix =====

{ pkgs ? import <nixpkgs> {} }:

pkgs.mkShell {
  buildInputs = [
    pkgs.nodejs
    pkgs.google-cloud-sdk
    pkgs.yarn
  ];

  shellHook = ''
    ROOT=$(git rev-parse --show-toplevel)
    export PATH="$ROOT/node_modules/.bin:$PATH"

    if [ ! -x "$ROOT/node_modules/.bin/clasp" ]; then
      echo "‚öôÔ∏è  Installing clasp@3.x via npm..."
      cd "$ROOT"
      npm install @google/clasp@3.0.3-alpha
    fi
  '';
}



===== FILE: verify_project_ownership_and_apps_script_api_enabled.sh =====

############################################################################
#  USAGE:  bash verify_project_ownership_and_apps_script_api_enabled.sh
#
# Purpose:
#   Ensures that the currently active `gcloud` account has
#   sufficient permissions (Owner or Editor) on the GCP
#   project defined in `maps_config.env`.
#
# Why this matters:
#   Many gcloud operations (e.g. linking Apps Script projects,
#   enabling APIs, or using `clasp`) fail or behave
#   unpredictably when the account lacks Editor/Owner roles.
#
# Expected:
#   - A config file named `maps_config.env` in the working dir
#   - It must define `PROJECT_ID=...`
#
# Behavior:
#   - Reads the current gcloud active account
#   - Checks if the account is an Owner or Editor of PROJECT_ID
#   - Exits with an error if not
############################################################################


function assert_project_owner_or_editor() {
  local CONFIG_FILE="./maps_config.env"

  # Ensure config file exists
  if [[ ! -f "$CONFIG_FILE" ]]; then
    echo "‚ùå ERROR: Config file $CONFIG_FILE not found"
    exit 1
  fi

  # Load PROJECT_ID from config file
  source "$CONFIG_FILE"

  if [[ -z "$PROJECT_ID" ]]; then
    echo "‚ùå ERROR: PROJECT_ID not set in $CONFIG_FILE"
    exit 1
  fi

  local ACTIVE_ACCOUNT
  ACTIVE_ACCOUNT=$(gcloud config get-value account 2>/dev/null)

  local HAS_ACCESS
  HAS_ACCESS=$(gcloud projects get-iam-policy "$PROJECT_ID" \
    --flatten="bindings[].members" \
    --format='value(bindings.role)' \
    --filter="bindings.members:user:$ACTIVE_ACCOUNT" | grep -E 'roles/(owner|editor)')

  if [[ -z "$HAS_ACCESS" ]]; then
    echo "‚ùå ERROR: Account $ACTIVE_ACCOUNT is not owner/editor of $PROJECT_ID"
    exit 1
  else
    echo "‚úÖ Access verified: $ACTIVE_ACCOUNT has rights on $PROJECT_ID"
  fi
}




function assert_google_apps_scripts_api_enabled_for_user() {
    echo "üîç Verify that Apps Script API is enabled at user level (should say 'On'):"
    echo "   üëâ Open: https://script.google.com/home/usersettings"
    echo ""
    read -p "Have you enabled the Google Apps Script API? [y/N] " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo "‚ùå Setup aborted. Please enable the API toggle and re-run."
      exit 1
    fi
    echo "‚úÖ Proceeding with setup..."
}


assert_project_owner_or_editor

assert_google_apps_scripts_api_enabled_for_user
